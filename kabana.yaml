apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  generation: 1
  labels:
    common.k8s.elastic.co/template-hash: "1843219000"
    common.k8s.elastic.co/type: kibana
    kibana.k8s.elastic.co/name: kb-apm-sample
  name: kb-apm-sample-kb
  namespace: default
  ownerReferences:
  - apiVersion: kibana.k8s.elastic.co/v1
    blockOwnerDeletion: true
    controller: true
    kind: Kibana
    name: kb-apm-sample
    uid: cabd73fe-fc05-48d0-8480-14b9f1bd84ef
  resourceVersion: "20799"
  uid: 48dbcc9f-602a-4d55-8782-5c17e3722a2e
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      common.k8s.elastic.co/type: kibana
      kibana.k8s.elastic.co/name: kb-apm-sample
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        co.elastic.logs/module: kibana
        kibana.k8s.elastic.co/config-hash: "4103874814"
      creationTimestamp: null
      labels:
        common.k8s.elastic.co/type: kibana
        kibana.k8s.elastic.co/name: kb-apm-sample
        kibana.k8s.elastic.co/version: 8.0.0
    spec:
      automountServiceAccountToken: false
      containers:
      - image: docker.elastic.co/kibana/kibana:8.0.0
        imagePullPolicy: IfNotPresent
        name: kibana
        ports:
        - containerPort: 5601
          name: https
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /login
            port: 5601
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 1Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mnt/elastic-internal/http-certs
          name: elastic-internal-http-certificates
          readOnly: true
        - mountPath: /mnt/elastic-internal/kibana-config
          name: elastic-internal-kibana-config
          readOnly: true
        - mountPath: /usr/share/kibana/config
          name: elastic-internal-kibana-config-local
        - mountPath: /usr/share/kibana/config/elasticsearch-certs
          name: elasticsearch-certs
          readOnly: true
        - mountPath: /usr/share/kibana/data
          name: kibana-data
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - /usr/bin/env
        - bash
        - -c
        - "#!/usr/bin/env bash\nset -eux\n\ninit_config_initialized_flag=/mnt/elastic-internal/kibana-config-local/elastic-internal-init-config.ok\n\nif
          [[ -f \"${init_config_initialized_flag}\" ]]; then\n    echo \"Kibana configuration
          already initialized.\"\n\texit 0\nfi\n\necho \"Setup Kibana configuration\"\n\nln
          -sf /mnt/elastic-internal/kibana-config/* /mnt/elastic-internal/kibana-config-local/\n\ntouch
          \"${init_config_initialized_flag}\"\necho \"Kibana configuration successfully
          prepared.\"\n"
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: docker.elastic.co/kibana/kibana:8.0.0
        imagePullPolicy: IfNotPresent
        name: elastic-internal-init-config
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        securityContext:
          privileged: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mnt/elastic-internal/http-certs
          name: elastic-internal-http-certificates
          readOnly: true
        - mountPath: /mnt/elastic-internal/kibana-config
          name: elastic-internal-kibana-config
          readOnly: true
        - mountPath: /mnt/elastic-internal/kibana-config-local
          name: elastic-internal-kibana-config-local
        - mountPath: /usr/share/kibana/config/elasticsearch-certs
          name: elasticsearch-certs
          readOnly: true
        - mountPath: /usr/share/kibana/data
          name: kibana-data
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: elastic-internal-http-certificates
        secret:
          defaultMode: 420
          optional: false
          secretName: kb-apm-sample-kb-http-certs-internal
      - name: elastic-internal-kibana-config
        secret:
          defaultMode: 420
          optional: false
          secretName: kb-apm-sample-kb-config
      - emptyDir: {}
        name: elastic-internal-kibana-config-local
      - name: elasticsearch-certs
        secret:
          defaultMode: 420
          optional: false
          secretName: kb-apm-sample-kb-es-ca
      - emptyDir: {}
        name: kibana-data
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2022-03-18T09:39:05Z"
    lastUpdateTime: "2022-03-18T09:39:05Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2022-03-18T09:36:53Z"
    lastUpdateTime: "2022-03-18T09:39:05Z"
    message: ReplicaSet "kb-apm-sample-kb-bb9dcfc87" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
